package com.wp.main.leetcode.medium;

/**
 * MARK：
 * 一、动态规划(DP)：动态规划算法是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治或递归）的方式去解决。
 * 动态规划算法通常用于求解具有某种最优性质的问题！！！
 *    能采用动态规划求解的问题的一般要具有3个性质：
 *       (1) 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。
 *       (2) 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。
 *       (3) 有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，
 *              但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）动态规划将原来具有指数级时间复杂度的搜索算法改进成了具有多项式时间复杂度的算法。
 *              其中的关键在于解决冗余，这是动态规划算法的根本目的。动态规划实质上是一种以空间换时间的技术，它在实现的过程中，不得不存储产生过程中的各种状态，所以它的空间复杂度要大于其它的算法。
 * 拿本题“找网格的最短路径”举例：
 * 题干要求每次移动只能向右或者向下，我们想找到终点网格的最优解(记为dp(终点))，如果我们能找到终点网格的上面网格或左面网格对应的最优解dp(终点-上)和dp(终点-左)，
 * 那么我们只需要在dp(终点-上)和dp(终点-左)中找到最小的值，最终加上终点网格的值就是最短路径；
 * 那么如果我们想找到dp(终点-上)和dp(终点-左)，我们只需要找到dp(终点-上-上)和dp(终点-上-左)的最小值，以及dp(终点-左-上)和dp(终点-左-左)的最小值，依此类推。
 * 最终我们发现解决方案其实就是找到每个网格的左和上网格的最优解，二者取最优然后和当前网格加和就是当前网格的最优解。如果从起点出发由于很多边界网格只有一种走法，因此很多网格的
 * 最优解很好确认，这样不断遍历每个网格，就能把每个网格的最优解都计算出来，最终到达最后一个网格我们就可以得出最终的最优解。
 *
 * 二、二维数组
 * 1、二维数组定义：设int[][] arr = new int[3][4]，那么该二维数组的定义有2种解读方式
 * 1.1、解读一：二维数组中有3个一维数组，每个一维数组由4个元素组成。
 * 1.2、解读二：该二维数组对应一个3行4列的网格。结合解读一中的定义：
 * （1）每个一维数组为一行，第一个一维数组第一行，第二个一维数组第二行，第三个一维数组第三行，依此类推；
 * （2）每个一维数组中的元素为一列，每个一维数组中的第一个元素为第一列，每个一维数组中的第二个元素为第二列，每个一维数组中的第三个元素为第三列\
 * tips：
 * 1、二维数组的长度就是一位数组的个数，如上，arr.length=3;
 * 2、二维数组中，一维数组的长度可以不一样，因此定义二维数组的时候可以只指定一维数组的个数，至于一维数组由几个元素组成可以为空：int[][] arr = new int[3][]
 * 3、二维数组直接赋值的定义方式：int[][] arr = {{1, 3, 1, 6}, {1, 5, 1}, {4, 2, 1, 3}}。和第一种定义方式一样的表达，外面的大括号表示二维数组，
 * 里面的每一个大括号代表一个一维数组，从左到右表示第一个二维数组，第二个二维数组...
 * 4、二维数组的遍历：先遍历二维数组，即查找二位数中的一维数组；然后遍历二维数组，即遍历二维数组中的元素
 * int[][] arr = {{1, 3, 1, 6}, {1, 5, 1}, {4, 2, 1, 3}};
 * for (int x = 0; x < arr.length; x++) {// 遍历输出数组
 * for (int y = 0; y < arr[x].length; y++) {// 遍历数组输出元素
 * System.out.println(arr[x][y]);
 * }
 * }
 */

/**
 * @Description 最小路径和
 * 给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
 * 说明：每次只能向下或者向右移动一步。
 * <p>
 * 示例 1：
 * 输入：grid = [[1,3,1],[1,5,1],[4,2,1]]
 * 输出：7
 * 解释：因为路径 1→3→1→1→1 的总和最小。
 * <p>
 * 示例 2：
 * 输入：grid = [[1,2,3],[4,5,6]]
 * 输出：12
 * <p>
 * 提示：
 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 200
 * 0 <= grid[i][j] <= 100
 * @Author admin
 * @Date 2023/3/2 9:49
 */
public class LeetCode64Mark {
    public static void main(String[] args) {
        int[][] arr = {{1, 3, 1, 6}, {1, 5, 1}, {4, 2, 1, 3}};
        for (int x = 0; x < arr.length; x++) {
            for (int y = 0; y < arr[x].length; y++) {
                System.out.println(arr[x][y]);
            }
        }
        int[][] grid = {{1,3,1},{1,5,1},{4,2,1}};
        System.out.println(standardExecute(grid));
    }


    /**
     * 思路：
     * 1、
     * 2、
     *
     * @param grid 二维数组
     * @return 返回最小路径和
     */
    private static int standardExecute(int[][] grid) {
        int result = 0;

        return result;
    }
}
